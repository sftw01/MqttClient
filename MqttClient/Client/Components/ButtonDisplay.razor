
<MudItem xs="12" sm="6" md="6">
    <MudPaper Elevation="3" Class="pa-4" Style="height: 180px; background-color: #2f3030; position: relative;">

        @* for split the screen in two parts - when enable and disable *@
        @if (State == "edit" || State == "lock")
        {
            <MudGrid Style="opacity: 0.2;">
                <MudItem xs="6" Style="display: flex; align-items: center;">
                    @if (Status)
                    {
                        <span class="material-symbols-outlined" style="color: @ColorOff; font-size: 140px; margin-right: 10px;">@IconOff</span>
                    }
                    else
                    {
                        <span class="material-symbols-outlined" style="color: @ColorOn; font-size: 140px; margin-right: 10px;">@IconOn</span>
                    }
                </MudItem>
                <MudItem xs="6" Style="display: flex; justify-content: flex-end;">
                    <MudButton Variant="Variant.Filled" Color="Color.Dark" Size="Size.Large" Style="height: 150px; width: 170px;">
                        <MudText Style="font-size: 2rem; font-weight: bold;">@Value.ToString()@Sufix</MudText>
                    </MudButton>
                </MudItem>
            </MudGrid>
        } else
        {
            <MudGrid>
                <MudItem xs="6" Style="display: flex; align-items: center;">
                    @if (Status)
                    {
                        <span class="material-symbols-outlined" style="color: @ColorOff; font-size: 140px; margin-right: 10px;">@IconOff</span>
                    }
                    else
                    {
                        <span class="material-symbols-outlined" style="color: @ColorOn; font-size: 140px; margin-right: 10px;">@IconOn</span>
                    }
                </MudItem>
                <MudItem xs="6" Style="display: flex; justify-content: flex-end;">
                    <MudButton Variant="Variant.Filled" Color="Color.Dark" Size="Size.Large" OnClick="ButtonClick" Style="height: 150px; width: 170px;">
                        <MudText Style="font-size: 3rem; font-weight: bold;">@Value.ToString()@Sufix</MudText>
                    </MudButton>
                </MudItem>
            </MudGrid>
        }

        @if (State == "edit")
        {
            <span class="material-symbols-outlined" style="position: absolute; top: 0px; left: 0px; color: #2f3030; font-size: 80px; cursor: pointer; background-color: #adadad; border: 2px solid white; border-radius: 50%; padding: 5px;">
                info
            </span>
        }

        @if (State == "lock")
        {
            <span class="material-symbols-outlined" style="position: absolute; top: 0px; right: 0px; color: #2f3030; font-size: 80px; cursor: pointer; background-color: #adadad; border: 2px solid white; border-radius: 50%; padding: 5px;">
                lock
            </span>
        }

    </MudPaper>
</MudItem>





@code {

    [Parameter]
    public string State { get; set; }
    [Parameter]
    public bool Status { get; set; }
    [Parameter]
    public int? Value { get; set; } = 64;
    [Parameter]
    public string Sufix { get; set; } = "%";
    [Parameter]
    public string? IconOn { get; set; } = "humidity_mid";
    [Parameter]
    public string? IconOff { get; set; } = "pause_circle";
    [Parameter]
    public string ColorOn { get; set; } = "orange";
    [Parameter]
    public string ColorOff { get; set; } = "yellow";
    
    [Parameter]
    public EventCallback<bool> StatusChanged { get; set; }






    [Parameter]
    public EventCallback<string> StateChanged { get; set; }

    private async Task ChangeStateAsync(string newState)
    {
        State = newState;
        await StateChanged.InvokeAsync(newState); // Wywołanie eventu zmiany stanu
        StateHasChanged(); // Ponowne renderowanie komponentu
    }






    private async Task ButtonClick()
    {
        await StatusChanged.InvokeAsync(Status);
    }


}
